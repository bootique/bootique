<?xml version="1.0" encoding="UTF-8"?>
<part xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
    version="5.0" xml:id="programming">
    <title>Programming</title>

    <chapter xml:id="programming-modules">
            <title>Modules</title>
            <para>Bootique apps are made of "modules". The framework simply locates all available
            modules, loads them in the DI environment, parses the command line, and then transfers
            control to a Command (that can originate from any of the modules) that matched the user
            choice. There's a growing list of modules created by Bootique development team. And you
            can easily write your own. In fact, programming in Bootique is primarily about writing
            Modules. </para>
            <para>A module is a Java library that contains some code. What makes it a module is a
            special Java class that implements <link
                xlink:href="https://google.github.io/guice/api-docs/latest/javadoc/index.html?com/google/inject/Module.html"
                >Guice Module interface</link>. This class defines what "services" or other types of
            objects the module provides (in other words what will be injectable by the module
            users). This is done in a form of "bindings", i.e. associations between publicly visible
            injectable service interfaces and specific
            implementations:<programlisting language="java">public class MyModule implements Module {
	@Override
	public void configure(Binder binder) {
		binder.bind(MyService.class).to(MyServiceImpl.class);
	}
}</programlisting></para>
            <para>There are other flavors of bindings in Guice. Please refer to <link
                xlink:href="https://github.com/google/guice/wiki/Motivation">Guice
                documentation</link> for details. One important form extensively used in Bootique is
                <link xlink:href="https://github.com/google/guice/wiki/Multibindings"
                >Multibinding</link>.</para>
        
    </chapter>
    <chapter xml:id="programming-module-providers">
            <title>Modules Auto-Loading</title>
            <para>Modules can be automatically loaded via <code>Bootique.autoLoadModules()</code> as
            long as they are included in your aplication dependencies. Auto-loading depends on the
            Java <link
                xlink:href="https://docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html"
                >ServiceLoader mechanism</link>. To ensure your modules can be auto-loaded do two
            things. First implement <code>io.bootique.BQModuleProvider</code> interface
            specific to your
            module:<programlisting language="java">public class MyModuleProvider implements BQModuleProvider {
	@Override
	public Module module() {
		return new MyModule();
	}
}</programlisting>After
            then create a file <code>META-INF/services/io.bootique.BQModuleProvider</code> with
            the only line being the name of your BQModuleProvider implementor. E.g.:</para>
            <programlisting>com.foo.MyModuleProvider</programlisting>
            <para><code>BQModuleProvider</code> has two more methods that you can optionally
            implement to help Bootique to make sense of the module being
            loaded:<programlisting language="java">public class MyModuleProvider implements BQModuleProvider {
	...
	// provides human-readable name of the module
	@Override
	public String name() {
		return "CustomName";
	}
	
	// a collection of modules whose services are overridden by this module
	@Override
	public Collection&lt;Class&lt;? extends Module>> overrides() {
		return Collections.singleton(BQCoreModule.class);
	}
}</programlisting></para>
        <para>If  in your Module you are planning to redefine any services from the upstream
            modules, specify those upstream modules in the <code>overrides()</code> collection. </para>
    </chapter>
    <chapter xml:id="programming-configuration">
            <title>Configuration and Configurable Factories</title>
        <para>Bootique Modules obtain their configuration in a form of "factory objects". We'll show
            some examples shortly. For now let's focus on the big picture, namely the fact that
            Bootique app configuration is multi-layered and roughly follows the sequence of "code -
            config files - overrides". "Code" is the default values that are provided in
            constructors of factory objects. Config files overlay those defaults with external
            configuration values. Config files is where the bulk of configuration usually stored.
            Finally config values may be further overridden via Java properties and/or environment
            variables. </para>
        <para>Now let's discuss how each step works.</para>
        <section>
            <title>Configuration via YAML Files</title>
            <para>As mentioned above, a Bootique app can be started with one or more YAML
                configuration files. To specify more than one file, use <code>--config</code> option
                multiple times. Configurations will be loaded and merged together in the order of
                their appearance on the command line. Here is a simple example of a config
                file:<programlisting language="python">log:
  level: warn
  appenders:
    - type: file
      logFormat: '%c{20}: %m%n'
      file: target/logback/debug.log

jetty:
  context: /myapp
  connector:
    port: 12009
</programlisting></para>
            <para>While this is not strictly required, as a rule the top-level keys in the file belong
                to configuration objects of individual modules. In the example above "log" subtree
                configures <code>bootique-logback</code> module, while "jetty" subtree configures
                <code>bootique-jetty-module</code>. For standard modules, refer to module-specific
                documentation on the structure of the supported configuration. Here we'll discuss how to
                build your own configuration-aware module.</para>
            <para>Bootique allows the Module to read its specific configuration subree as an object of
                the type defined in the Module. Very often such an object is written as a factory that
                contains a bunch of setters for the configuration properties, and a factory method to
                produce some service that a Module is interested in based on this configuration. Here is
                an example
                factory:<programlisting language="java">public class MyFactory {

	private int intProperty;
	private String stringProperty;

	public void setIntProperty(int i) {
		this.intProperty = i;
	}

	public void setStringProperty(String s) {
		this.stringProperty = s;
	}

	// factory method
	public MyService createMyService(SomeOtherService soService) {
		return new MyServiceImpl(soService, intProperty, stringProperty);
	}
}</programlisting></para>
            <para>The factory contains configuration property declarations, as well as public setters
                for these properties (you can create the getters if you want as well. While this is not
                strictly required, it may be useful. E.g. for unit tests). Now let's take a look at the
                Module
                class:<programlisting language="java">public class MyModule extends ConfigModule {
	@Provides
	public MyService createMyService(
             ConfigurationFactory configFactory, 
             SomeOtherService soService) {

		return configFactory
                 .config(MyFactory.class, configPrefix)
                 .createMySerice(soService);
	}
}</programlisting></para>
            <para>And now a sample configuration that will work with our
                module:<programlisting>my:
  intProperty: 55
  stringProperty: 'Hello, world!'</programlisting></para>
            <para>A few points to note here: </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Calling our module "MyModule" and extending from <code>ConfigModule</code>
                            gives it access to the protected "configPrefix" instance variable that is
                            initialized to the value of "my" (the naming convention here is to use the
                            Module simple class name without the "Module" suffix and converted to
                            lowercase).</para>
                    </listitem>
                    <listitem>
                        <para><code>@Provides</code> annotation is a Guice way of marking a Module
                            method as a "provider" for a certain type of injectable service. All its
                            parameters are themselves injectable objects. </para>
                    </listitem>
                    <listitem>
                        <para><code>ConfigurationFactory</code> is the class used to bind a subtree
                            of the app YAML configuration to a given Java object (in our case -
                            MyFactory). The structure of MyFactory is very simple here, but it can
                            be as complex as needed, containing nested objects, arrays, maps, etc.
                            Internally Bootique uses <link
                                xlink:href="http://wiki.fasterxml.com/JacksonHome">Jackson
                                framework</link> to bind YAML to a Java class, so all the features
                            of Jackson can be used to craft configuration.</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <section>
            <title>Configuration via Properties</title>
            <para>YAML file can be thought of as a set of nested properties. E.g. the following
                config <programlisting>my:
  prop1: val1
  prop2: val2</programlisting>can be
                represented as two properties ("my.prop1", "my.prop2") being assigned some values.
                Bootique takes advantage of this structural equivalence and allows to define
                configuration via properties as an alternative (or more frequently - an addition) to
                YAML. If the same "key" is defined in both YAML file and a property,
                    <code>ConfigurationFactory</code> would use the value of the property (in other
                words properties override YAML values).</para>
            <para>To turn a given property into a configuration property, you need to prefix it with
                    "<code>bq.</code>". This "namespace" makes configuration explicit and helps to
                avoid random naming conflicts with properties otherwise present in the
                system.</para>
            <para>Properties can be provided to Bootique via BQCoreModule
                extender:<programlisting language="java">class MyModule implements Module {
	public void configure(Binder binder) {

		BQCoreModule.extend(binder)
		  .setProperty("bq.my.prop1", "valX");

		BQCoreModule.extend(binder)
               .setProperty("bq.my.prop2", "valY");
	}
}</programlisting></para>
            <para>Alternatively they can be loaded from system properties.
                E.g.:<programlisting language="bourne">java -Dbq.my.prop1=valX -Dbq.my.prop2=valY -jar myapp.jar</programlisting></para>
            <para>Though generally this approach is sneered upon, as the authors of Bootique are
                striving to make Java apps look minimally "weird" in deployment, and "-D" is one of
                those unintuitive "Java-only" things. Often a better alternative is to define the
                bulk of configuration in YAML, and pass values for a few environment-specific
                properties via shell variables (see the next section) or bind them to CLI
                flags.</para>
        </section>
        <section>
            <title>Configuration via Environment Variables</title>
            <para>Similarly to properties, Bootique allows to use <emphasis>environment
                    variables</emphasis> to specify/override configuration values. There are two
                approaches for matching variables and with configuration values - one based on the
                variable naming convention, and another - on explicit variable definitions. Let's
                start with the naming comvention. Bootique recognizes variables whose names start
                with <code>BQ_</code>, with the rest of the name interpreted as a property path
                separated with underscores. Variable names are case-insensitive.
                E.g.:<programlisting>export BQ_MY_PROP1=valX
export BQ_MY_PROP2=valY</programlisting>While
                variables work similar to JVM properties, using them has advantages in certain situations:<itemizedlist>
                    <listitem>
                        <para>They may be used to configure credentials, as unlike YAML they won't
                            end up in version control, and unlike Java properties, they won't be
                            visible in the process list.</para>
                    </listitem>
                    <listitem>
                        <para>They provide customized application environment without changing the
                            launch script.</para>
                    </listitem>
                </itemizedlist></para>
            <para>Very often using the naming convention for variable names is not practical. It
                looks "weird" (similar argument as we've made about "-D" above), it may be too long
                and unwieldy, and may potentially introduce conflicts due to its case-insensitive
                nature. Alternatively the app may explicitly map some variable names to
                configuration paths (notice that no "bq." prefix is necessary here to identify the
                configuration
                value):<programlisting>class MyModule implements Module {
	public void configure(Binder binder) {

		BQCoreModule.extend(binder)
		  .declareVar("my.prop1", "P1");

		BQCoreModule.extend(binder)
               .declareVar("my.prop2", "P2");
	}
}</programlisting></para>
            <para>So now a person running the app may set the above configuration
                as<programlisting>export P1=valX
export P2=valY</programlisting></para>
            <para>Moreover, explicitly declared vars will automatically appear in the application
                help, assisting the admins in configuring your app</para>
            <para><emphasis> (TODO: document BQConfig and BQConfigProperty config factory
                    annotations required for the help generation to
                work)</emphasis><programlisting>$ java -jar myapp-1.0.jar --help
...
ENVIRONMENT
      P1
           Sets value of some property.

      P2
           Sets value of some other property.</programlisting></para>
        </section>
        <section>
            <title>Polymorphic Configuration Objects</title>
            <para>A powerful feature of Jackson is the ability to dynamically create subclasses of
                the configuration objects. Bootique takes full advantage of this. E.g. imagine a
                logging module that needs "appenders" to output its log messages (file appender,
                console appender, syslog appender, etc.). The framework might not be aware of all
                possible appenders its users might come up with in the future. Yet it still wants to
                have the ability to instantiate any of them, based solely on the data coming from
                YAML. Moreover each appender will have its own set of incompatible configuration
                properties. In fact this is exactly the situation with <code>bootique-logback</code>
                module. </para>
            <para>Here is how you ensure that such a polimorphic configuration is possible. Let's
                start with a simple class hierarchy and a factory that contains a variable of the
                supertype that we'd like to init to a concrete subclass in
                runtime:<programlisting language="java">public abstract class SuperType {
...
}

public class ConcreteType1 extends SuperType {
...
}

public class ConcreteType2 extends SuperType {
...	
}

public class MyFactory {

	// can be a class or an interface
	private SuperType subconfig;
	

	public void setSubconfig(SuperType s) {
		this.subconfig = s;
	}	
...
}</programlisting></para>
            <para>To make polimorphism work, we need to provide some instructions to Jackson. First
                we need to annotate the supertype and
                subtypes:<programlisting language="java">@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, 
     property = "type", 
     defaultImpl = ConcreteType1.class)
public abstract class SuperType {

}

@JsonTypeName("type1")
public class ConcreteType1 extends SuperType {

}

@JsonTypeName("type2")
public class ConcreteType2 extends SuperType {
	
}</programlisting></para>
            <para>After that we need to create a service provider file called
                    <code>META-INF/service/io.bootique.config.PolymorphicConfiguration</code>
                where all the types participating in the hierarchy are listed (including the
                supertype):<programlisting>com.foo.SuperType
com.foo.ConcreteType1
com.foo.ConcreteType2</programlisting></para>
            <para>This should be enough to work with configuration like
                this:<programlisting>my:
  subconfig:
    type: type2
    someVar: someVal</programlisting></para>
            <para>Or this (here type is implicitly assumed to be "type1", see the "defaultImpl" in
                the <code>@JsonTypeInfo</code> annotation
                above:<programlisting>my:
  subconfig:
    someOtherVar: someOtherVal</programlisting></para>
            <para>If another module decides to create yet another subclass of SuperType, it will
                need to create its own
                    <code>META-INF/service/io.bootique.config.PolymorphicConfiguration</code>
                file that mentions the new subclass.</para>
        </section>
    </chapter>
    <chapter xml:id="programming-using-modules">
            <title>Using Modules</title>
            <para>Modules can use other "upstream" modules in a few ways:<itemizedlist>
                <listitem>
                    <para>"Import": a downstream module uses another module as a library, ignoring
                        its injectable services.</para>
                </listitem>
                <listitem>
                    <para>"Use" : downstream module's classes inject classes from an upstream
                        module.</para>
                </listitem>
                <listitem>
                    <para>"Contribute": downstream module injects objects to collections and maps
                        defined in upstream modules.</para>
                </listitem>
            </itemizedlist></para>
            <para>Import case is trivial, so we'll concentrate on the two remaining scenarios. We
            will use <link
                xlink:href="https://github.com/bootique/bootique/blob/master/bootique/src/main/java/io/bootique/BQCoreModule.java"
                >BQCoreModule</link> as an example of an upstream module, as it is available in all
            apps.</para>
        <section>
            <title>Injecting Other Module's Services</title>
            <para>You can inject any services declared in other modules. E.g. BQCoreModule provides
                a number of objects and services that can be accessed via
                injection:<programlisting language="java">class MyService {

	@Args
	@Inject
	private String[] args;

	public String getArgsString() {
		return Arrays.asList(getArgs()).stream().collect(joining(" "));
	}
}</programlisting></para>
            <para>In this example we injected command line arguments that were used to start the
                app. Note that since there can potentially be more than one <code>String[]</code> in
                a DI container, Bootique <code>@Args</code> annotation is used to uniquely identify
                the array that we want here.</para>
        </section>
        <section>
            <title>Contributing to Other Modules</title>
            <para>Guice supports <link
                    xlink:href="https://github.com/google/guice/wiki/Multibindings"
                    >multibindings</link>, intended to <emphasis>contribute</emphasis> objects
                defined in a downstream module to collections/maps used by services in upstream
                modules. Bootique hides Guice API complexities, usually providing "extenders" in
                each module. E.g. the following code adds <code>MyCommand</code> the the app set of
                commands:<programlisting language="java">public class MyModule implements Module {

	@Override
	public void configure(Binder binder) {
		BQCoreModule.extend(binder).addCommand(MyCommand.class);
	}
}</programlisting></para>
            <para>Here we obtained an extender instance via a static method on BQCoreModule. Most
                standard modules define their own extenders accessible via
                    <code>"extend(Binder)"</code>. This is a pattern you might want to follow in
                your own modules.</para>
        </section>
        </chapter>
    <chapter xml:id="programming-application-module">
            <title>Application Class</title>
            <para>A class that contains the <code>"main()"</code> method is informally called
                "application". Bootique does not impose any additional requirements on this class.
                You decide what to put in it. It can be limited to just <code>"main()"</code>,
                or turned into a REST API resource, etc. </para>
        <section>
            <title>Application as a Module</title>
            <para>Most often then not it makes sense to turn the application class into a Module
                though. After all a Bootique app is just a collection of Modules, and this way the
                application class would represent that one final Module to rule them
                all:<programlisting language="java">public class Application implements Module {

   public static void main(String[] args) {
      Bootique.app(args).module(Application.class).autoLoadModules().run();
   }

   public void configure(Binder binder) {
      // load app-specific services; redefine standard ones
   }
}</programlisting></para>
            <para>You may also implement a separate BQModuleProvider for the Application module.
                Then <code>autoLoadModules()</code> will discover it just like any other Module, and
                there won't be a need to add Application module explicitly.</para>
        </section>
        <section>
            <title>Common Main Class</title>
            <para>If all your code is packaged in auto-loadable modules (which is always a good
                idea), you may not even need a custom main class.
                    <code>io.bootique.Bootique</code> class itself declares a
                    <code>main()</code> method and can be used as an app launcher. This creates some
                interesting possibilities. E.g. you can create Java projects that have no code of
                their own and are simply collections of modules declared as compile dependencies.
                More details on packaging are given in the "Runnable Jar" chapter.</para>
        </section>
    </chapter>
        
    <chapter>
        <title>Commands</title>
        <para>Bootique runtime contains a set of commands coming from Bootique core and from all the
            modules currently in effect in the app. On startup Bootique attempts to map command-line
            arguments to a single command type. If no match is found, a <emphasis>default</emphasis>
            command is executed (which is normally a "help" command). To list all available
            commands, the app can be run with <code>--help</code> option (in most cases running
            without any options will have the same effect).
            E.g.:<programlisting>$ java -jar myapp-1.0.jar --help

NAME
      com.foo.MyApp

OPTIONS
      -c yaml_location, --config=yaml_location
           Specifies YAML config location, which can be a file path or a URL.

      -h, --help
           Prints this message.

      -H, --help-config
           Prints information about application modules and their configuration
           options.

      -s, --server
           Starts Jetty server.
</programlisting></para>
        <section>
            <title>Writing Commands</title>
            <para>Most common commands are already available in various standard modules, still
                often you'd need to write your own. To do that, first create a command class. It
                should implement <code>io.bootique.command.Command</code> interface, though
                usually it more practical to extend
                    <code>io.bootique.command.CommandWithMetadata</code> and provide some
                metadata used in help and
                elsewhere:<programlisting language="java">public class MyCommand extends CommandWithMetadata {

	private static CommandMetadata createMetadata() {
		return CommandMetadata.builder(MyCommand.class)
				.description("My command does something important.")
				.build();
	}

	public MyCommand() {
		super(createMetadata());
	}

	@Override
	public CommandOutcome run(Cli cli) {

		// ... run the command here....

		return CommandOutcome.succeeded();
	}
}</programlisting></para>
            <para>The command initializes metadata in constructor and implements the "run" method to
                run its code. The return CommandOutcome object instructs Bootique what to do when
                the command finishes. The object contains desired system exit code, and exceptions
                that occurred during execution. To make the new command available to Bootique, add
                it to <code>BQCoreModule</code>'s extender, as was already shown
                above:<programlisting language="java">public class MyModule implements Module {

	@Override
	public void configure(Binder binder) {
		BQCoreModule.extend(binder).addCommand(MyCommand.class);
	}
}</programlisting></para>
            <para>To implement a "daemon" command running forever until it receives an OS signal
                (e.g. a web server waiting for user requests) , do something like
                this:<programlisting language="java">@Override
public CommandOutcome run(Cli cli) {

	// ... start some process in a different thread ....

	// now wait till the app is stopped from another thread 
	// or the JVM is terminated
	try {
		Thread.currentThread().join();
	} catch (InterruptedException e) {
		// ignore exception or log if needed
	}

	return CommandOutcome.succeeded();
}</programlisting></para>
        </section>
        <section>
            <title>Injection in Commands</title>
            <para>Commands can inject services, just like most other classes in Bootique.
                There are some specifics though. Since commands are sometimes instantiated, but not
                executed (e.g. when <code>--help</code> is run that lists all commands), it is often
                desirable to avoid immediate instantiation of all dependencies of a given command.
                So a common pattern with commands is to inject Guice <code>Provider</code> instead
                of direct
                dependency:<programlisting language="java">@Inject
private Provider&lt;SomeService> provider;

@Override
public CommandOutcome run(Cli cli) {
	provider.get().someMethod();
}</programlisting></para>
        </section>
    </chapter>
    <chapter>
        <title>Options</title>
        <section>
            <title>Simple command-line options</title>
            <para>In addition to commands, the app can define "options". Options are not associated with
                any runnable java code, and simply pass command-line values to commands and services.
                E.g. the standard "<code>--config</code>" option is used by
                <code>CliConfigurationSource</code> service to locate configuration file.
                Unrecognized options cause application startup errors. To be recognized, an option needs
                to be "contributed" to Bootique similar to
                commands:<programlisting language="java">CliOption option = CliOption
    .builder("email", "An admin email address")
    .valueRequired("email_address").build();

BQCoreModule.extend(binder).addOption(option);</programlisting>To
                read a value of the option, a service should inject <code>io.bootique.cli.Cli</code>
                object (commands also get this object as a parameter to "run")
                :<programlisting language="java">@Inject
private Cli cli;

public void doSomething() {
    Collection&lt;String> emails = cli.optionStrings("email");
// do something with option values....
}</programlisting></para>
        </section>
        <section>
            <title>Configuration command-line options</title>
            <para>
                Typically Bootique application is launched with YAML configuration.
                Due to structural equivalence, you can use properties and env vars as alternative (or an addition)
                to YAML or combine both approaches.
                Sometimes providing of YAML may not be practical, for example:<itemizedlist>
                <listitem>
                    <para>An app is started in different modes</para>
                </listitem>
                <listitem>
                    <para>A job-containing app is run with different parameter sets</para>
                </listitem>
            </itemizedlist>
                To cover such cases, specific configuration options on command line can
                be used.
                <para>Option value sets a config property:
                    <programlisting language="java">BQCoreModule.extend(binder).addOption("jobs.myjob.param", "my-opt");
                    </programlisting>
                </para>
                <para>Option presence sets a property to a fixed value:
                    <programlisting language="java">BQCoreModule.extend(binder).addOption("jobs.myjob.param", "1", "my-opt");
                    </programlisting>
                </para>

                <para>Option presence loads a bundled YAML, meaning the order of options is significant:
                    <programlisting language="java">BQCoreModule.extend(binder).addConfigFileOption("classpath:xyz.yml", "my-opt");
                    </programlisting>
                </para>
                This kind of CLI option alias the option value to a config path which navigates through the
                configuration tree to the property that should be bound
                by an option.
                In other words: CLI option set up configuration property without regard to its presence in YAML
                or the option path like <code>jobs.myjob.param</code> overrides YAML:<programlisting>
jobs:
  myjob:
    param: x
            </programlisting>
                To sum it up, let’s numerate major points on usage of configuration approaches:<itemizedlist>
                <listitem>
                    <para>Environment variables, properties and CLI options are applied exactly in this order
                        from left to right.</para>
                </listitem>
                <listitem>
                    <para>Command's options don't intersect with configuration options.</para>
                </listitem>
                <listitem>
                    <para>Multiple "--config" merged then overriders (vars, props, etc.) are applied.</para>
                </listitem>
            </itemizedlist>
            </para>
        </section>
    </chapter>
    <chapter>
        <title xml:id="logging">Logging</title>
        <section>
            <title>Loggers in the Code </title>
            <para>Standard Bootique modules use <link xlink:href="http://www.slf4j.org/"
                    >SLF4J</link> internally, as it is the most convenient least common denominator
                framework, and can be easily bridged to other logging implementations. Your apps or
                modules are not required to use SLF4J, though if they do, it will likely reduce the
                amount of bridging needed to route all logs to a single destination.</para>
        </section>
        <section>
            <title>Configurable Logging with Logback</title>
            <para>For better control over logging a standard module called
                    <code>bootique-logback</code> is available, that integrates <link
                    xlink:href="http://logback.qos.ch/">Logback framework</link> in the app. It
                seamlessly bridges SLF4J (so you keep using SLF4J in the code), and allows to
                configure logging via YAML config file, including appenders (file, console, etc.)
                and per class/package log levels. Just like any other module,
                    <code>bootique-logback</code> can be enabled by simply adding it to the pom.xml
                dependencies, assuming <code>autoLoadModules()</code> is in
                effect:<programlisting language="xml">&lt;dependency>
	&lt;groupId>io.bootique.logback&lt;/groupId>
	&lt;artifactId>bootique-logback&lt;/artifactId>
&lt;/dependency></programlisting>See
                    <code>bootique-logback</code> module <link
                    xlink:href="http://bootique.io/docs/0/bootique-logback-docs/"
                    >documentation</link> for further details.</para>
        </section>
        <section>
            <title>BootLogger</title>
            <para>To perform logging during startup, before DI environment is available and YAML
                configuration is processed, Bootique uses a special service called
                    <code>BootLogger</code>, that is not dependent on SLF4J and is not automatically
                bridged to Logback. It provides an abstraction for writing to stdout / stderr, as
                well as conditional "trace" logs sent to stderr. To enable Bootique trace logs,
                start the app with <code>-Dbq.trace</code> as described in the deployment section. </para>
            <para>BootLogger is injectable, in case your own code needs to use it. If the default
                BootLogger behavior is not satisfactory, it can be overridden right in the
                    <code>main(..)</code> method, as unlike other services, you may need to change
                it before DI is
                available:<programlisting language="java">public static void main(String[] args) {
   Bootique.app(args).bootLogger(new MyBootLogger()).run();
}</programlisting></para>
        </section>
    </chapter>
</part>
